# -*- coding: utf-8 -*-
"""performance_predictor_streamlit.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sO1W4scKGn8r5Z8ZPbLGnwuA-xAmROBL
"""

pip install streamlit

import streamlit as st
import joblib

model = joblib.load('student_performance_predictor.pkl')

st.title("Student Performance Predictor")
study_hours = st.slider("Study Hours", 0, 10, 2)
result = model.predict([[study_hours]])
st.write("Predicted score:", result[0])

import streamlit as st
import joblib
import pandas as pd

# Load the pre-trained model
# Make sure to replace 'gpa_predictor_model.pkl' with the actual path to your trained model file
model = joblib.load('student_performance_predictor.pkl')

st.title("Student Performance Predictor")

# Create input fields for each variable
age = st.slider("Age", 5, 18, 10)
gender = st.selectbox("Gender", [1, 0])
ethnicity = st.selectbox("Ethnicity", [0, 1, 2, 3]) # Add more options as needed
parental_education = st.selectbox("Parental Education", [0, 1, 2, 3, 4]) # Add more options as needed
study_time_weekly = st.number_input("Study Time Weekly (hours)", min_value=0.000000, value=30.000000, step=0.000001)
absences = st.number_input("Absences", min_value=0)
tutoring = st.selectbox("Tutoring", [1, 0])
parental_support = st.selectbox("Parental Support", [0, 1, 2, 3])
extracurricular = st.selectbox("Extracurricular Activities", [1, 0])
sports = st.selectbox("Sports", [1, 0])
music = st.selectbox("Music", [1, 0])
volunteering = st.selectbox("Volunteering", [1, 0])
grade_class = st.selectbox("Grade Class", [1.0, 2.0, 3.0, 4.0]) # Adjust based on your data

# Prepare the input data for the model
# It's crucial that the order and format of the features match what your model was trained on
input_data = pd.DataFrame({
    'Age': [age],
    'Gender': [gender],
    'Ethnicity': [ethnicity],
    'ParentalEducation': [parental_education],
    'StudyTimeWeekly': [study_time_weekly],
    'Absences': [absences],
    'Tutoring': [1 if tutoring == "Yes" else 0], # Convert Yes/No to 1/0
    'ParentalSupport': [parental_support],
    'Extracurricular': [1 if extracurricular == "Yes" else 0], # Convert Yes/No to 1/0
    'Sports': [1 if sports == "Yes" else 0], # Convert Yes/No to 1/0
    'Music': [1 if music == "Yes" else 0], # Convert Yes/No to 1/0
    'Volunteering': [1 if volunteering == "Yes" else 0], # Convert Yes/No to 1/0
    'GradeClass': [grade_class]
})

# Note: You might need to perform one-hot encoding or other preprocessing
# on the categorical features (Gender, Ethnicity, ParentalEducation, ParentalSupport)
# to match the format expected by your trained model.
# The example above only converts Yes/No to 1/0 for boolean features.

# Make the prediction
if st.button("Predict GPA"):
    # Perform any necessary preprocessing on input_data here before predicting
    # For example, one-hot encoding for categorical features

    predicted_gpa = model.predict(input_data)
    st.write("Predicted GPA:", predicted_gpa[0])